ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 100) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 50) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 20) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 30) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram() +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
by_day
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 500) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 2000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 10000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram() +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency") +
geom_density()
ggplot(by_day, aes(total.steps)) +geom_density()
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 30) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency")
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 300) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency")
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency")
?quantile
median(by_day$total.steps)
mean(by_day$total.steps)
sd(by_day$total.steps)
summary(by_day$total.steps)
dat
by_int <- group_by(dat, interval)
by_int <- summarise(by_int, average.steps = mean(steps))
by_int
by_int <- group_by(dat, interval)
by_int <- summarise(by_int, average.steps = mean(steps, na.rm = TRUE))
by_int
View(by_int)
plot(by_int$interval, )
ggplot(by_int, aes(interval, average.steps)) +
geom_line() +
labs(title = "Time Series Plot",
x = "Time Interval of the day",
y = "Average number of steps taken, averaged across all days")
plot(by_int$interval, by_int$average.steps, type = "l")
which(max(by_int$average.steps))
max(by_int$average.steps)
which.max(by_int$average.steps)
by_int[104,]
by_int[which.max(by_int$average.steps), 1]
paste(by_int[which.max(by_int$average.steps), 1])
dat
no.nas.total <- dat %>%
filter(steps == NA) %>%
n()
?n
no.nas.total <- dat %>%
filter(steps == NA) %>%
mutate(nrows = n()) %>%
unique()
no.nas.total
no.nas.total <- dat %>%
filter(steps == NA) %>%
mutate(nrows = n()) %>%
print
no.nas.total <- dat %>%
filter(steps == NA)
no.nas.total
dat
filter(dat, steps == NA)
filter(dat, steps == "NA)
filter(dat, steps == "NA")
class(dat$steps)
filter(dat, steps = NA)
dat[c(1) == NA, ]
dat
View(dat)
?filter
no.nas.total <- dat %>%
filter(is.na(steps))
no.nas.total
no.nas.total <- dat %>%
filter(is.na(steps)) %>%
mutate(total = n())
no.nas.total
no.nas.total <- dat %>%
filter(is.na(steps)) %>%
mutate(total = n()) %>%
unique()
no.nas.total
nrow(no.nas.total)
no.nas.total <- nrow(filter(dat, is.na(steps)))
no.nas.total
(no.nas.total <- nrow(filter(dat, is.na(steps))))
dat
indices <- is.na(dat$steps)
indices
sum(indices)
indices <- is.na(dat$steps)
sum(indices)
by_day
by_itn
by_int
dat
dat[indices,]
class(dat$interval)
temp <- dat
temp[i, ]$steps
temp[2, ]$steps
temp
for (i in indices){
xt <- by_int$interval %in% temp[i,]$interval
temp[i, ]$steps <- by_int[xt,]$average.steps
}
temp
by_int
summary(temp)
summary(dat)
for (i in indices){
i
}
for (i in indices){
print(i)
}
a = 0
for (i in indices){
a = a + 1
}
a
temp$interval
summary(temp$interval)
summary(dat$interval)
summary(temp)
summary(temp$steps)
summary(dat$steps)
which(by_int$interval == 5)
indices
which(indices == T)
summary(a)
a
a <- which(indices == TRUE)
a
class(a)
a
summary(a)
for (i in a){
print(i)
}
temp
by_int
temp <- dat
temp
by_int
which(by_int$interval == temp[17568,]$interval)
by_int[288,]
temp[17568,]
a <- which(indices == TRUE)
for (i in a){
xt <- which(by_int$interval == temp[i, ]$interval)
temp[i, ]$steps <- by_int[xt,]$average.steps
}
temp
summary(temp$steps)
summary(dat$steps)
?runif
z <- runif(10)
z
z <- as.integer(100.3)
z
z <- as.integer(100.7)
z
z <- runif(20, 20, 50)
z <- as.integer(z)
z
for(i in z){print(1)}
for(i in z){print(i)}
dat
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
***
## Loading and preprocessing the data
Setting the global options for the document
```{r setoptions}
library(knitr)
library(ggplot2)
library(lubridate)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
```
Extracting Data, Converting the resultant data frame to tbl_df
```{r load.preprocess.data}
unzip("activity.zip")
dat <- read.csv("activity.csv")
dat <- tbl_df(dat)
```
***
## What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
```{r mean.steps}
by_day <- group_by(dat, date)
by_day <- summarize(by_day, total.steps = sum(steps, na.rm = TRUE))
```
2. Make a histogram of the total number of steps taken each day
```{r histogram}
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r report.mean.median}
(median.steps <- median(by_day$total.steps))
(mean.steps <- mean(by_day$total.steps))
```
Mean number of steps = `r mean.steps`
Median number of steps = `r median.steps`
***
## What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r by.int}
## Group the data by time intervals
by_int <- group_by(dat, interval)
by_int <- summarise(by_int, average.steps = mean(steps, na.rm = TRUE))
```
```{r}
## Plot Time Series graph, using ggplot
ggplot(by_int, aes(interval, average.steps)) +
geom_line() +
labs(title = "Time Series Plot",
x = "Time Interval of the day",
y = "Average steps taken (across all days)")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
(max.steps <- paste(by_int[which.max(by_int$average.steps), 1]))
```
Answer: `r max.steps`
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
indices <- is.na(dat$steps)
total.nas <- sum(indices)
```
Answer: `r total.nas`
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Answer: We will be filling missing values in the dataset with the mean for the respective 5-minute interval. We already computed a logical vector containing indices in the original dataset for which `steps == NA` in the previous question.
*       The tbl_df object `by_int` will come handy in making substitutions.
*       We can use the logical vector `indices` to get the row numbers corresponding the `steps == NA`
*       Running a `for` loop with the row numbers, we can make substitute the NA values in
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
Answer: The new dataset (tbl_df object) `newdat` has been computed and printed below:
```{r}
a <- which(indices == TRUE)
newdat <- dat
for (i in a){
xt <- which(by_int$interval == newdat[i, ]$interval)
newdat[i, ]$steps <- by_int[xt,]$average.steps
}
newdat
```
## Are there differences in activity patterns between weekdays and weekends?
dat
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE))
dd
class(dd$day)
weekday("2012-10-01")
as.date(dd$date[1])
ymd(dd$date[1])
wday(ymd(dd$date[1]))
wday(ymd(dd$date[1]), label = TRUE)
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = TRUE))
dd
View(dd)
?ifelse
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE))
dd
?mutate
dd
class(dd$interval)
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE)) %>%
mutate(factor = if(interval >= 2 & interval <= 6) "weekday"
else "weekend")
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE)) %>%
mutate(factor = if(day >= 2 & day <= 6) "weekday"
else "weekend")
dd
View(dd)
filter(dd, day == 1)
filter(dd, day == 7)
?ifelse
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, Weekday, Weekend)
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, Yes, No)
dd
dd <- select(dd, -factor)
dd
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, TRUE, FALSE)
dd
filter(dd, factor == FALSE)
filter(dd, day == 1)
dd <- select(dd, -factor)
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, weekday, weekend)
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, TRUE, FALSE)
dd
dd[which(dd$factor == TRUE),]$factor <- "Weekday"
dd
dd[which(dd$factor == FALSE,)]$factor <- "Weekend"
dd[which(dd$factor == FALSE),]$factor <- "Weekend"
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE)) %>%
mutate(factor = if(day >= 2 & day <= 6) "weekday"
else "weekend")
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, TRUE, FALSE)
dd[which(dd$factor == TRUE),]$factor <- "Weekday"
dd[which(dd$factor == FALSE),]$factor <- "Weekend"
dd
table(dd$factor)
dd <- newdat
dd <- dd %>%
mutate(day = ymd(paste(date))) %>%
mutate(day = wday(day, label = FALSE))
dd$factor <- ifelse(dd$day >= 2 & dd$day<= 6, TRUE, FALSE)
dd[which(dd$factor == TRUE),]$factor <- "Weekday"
dd[which(dd$factor == FALSE),]$factor <- "Weekend"
dd
table(dd$factor)
dd$factor <- as.factor(dd$factor)
dd$factor <- as.factor(dd$factor)
dd
str(dd$factor)
by_wdays <- group_by(dd, factor)
by_wdays
?summarise
?group_by
gdata <- group_by(dd, factor, interval)
pdata <- summarise(gdata, mean(steps))
pdata
View(pdata)
pdata <- summarise(gdata, avg = mean(steps))
pdata
ggplot(pdata, aes(interval, avg)) +
geom_line(aes(group = factor))
pdata
sum(is.na(pdata$avg))
sum(is.na(pdata$interval))
sum(is.na(pdata$factor))
ggplot(pdata, aes(interval, avg)) +
geom_line()
p <- ggplot(pdata, aes(interval, avg))
p + geom_line()
View(pdata)
p <- ggplot(pdata, aes(interval, avg))
p + geom_point()
?ggplot
ggplot(by_day, aes(total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Histogram of Total Steps taken per day",
x = "Total Steps Taken",
y = "Frequency")
library(ggplot2)
p <- ggplot(pdata, aes(interval, avg))
p + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
gdata <- group_by(dd, factor, interval)
pdata <- summarise(gdata, avg = mean(steps))
p <- ggplot(pdata, aes(interval, avg))
p + geom_line(aes(group = factor))
p + geom_line(aes(group = factor, col = factor))
gdata <- group_by(dd, factor, interval)
pdata <- summarise(gdata, avg = mean(steps))
p <- ggplot(pdata, aes(interval, avg))
p + geom_line(aes(group = factor,
col = factor)) +
labs(title = "Time series plot",
x = "5-minute time intervals",
y = "Average steps taken",
col = "Days")
?ggplot
?ggplot2
?ggplot
?ggplot
??ggplot
source('~/.active-rstudio-document', echo=TRUE)
p + geom_line() +
facet_grid(factor ~.) +
labs(title = "Time series plot",
x = "5-minute time intervals",
y = "Average steps taken")
?rnorm
rnorm(1000, 10)
rnorm(1000*10)
nosim <- 1000
n <- 10
m <- matrix(rnorm(nosim * n), nosim)
dim(m)
m
View(m)
m <- matrix(rnorm(nosim * n), nosim)
?matrix
m <- matrix(rnorm(nosim * n), nrow = nosim, ncol = 10)
dim(m)
m
library(swrl)
library(swirl)
swirl()
swirl()
swirl()
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
apply(matrix(rnorm(10000), 1000), 1, mean)
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000), 1000), 1, mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000, 4), 1000), 1, mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1, 10000, TRUE), 1000), 1, mean)
)
library(UsingR); data(father.son);
install.packages("UsingR")
library(UsingR); data(father.son);
father.son
View(father.son)
x <- father.son$sheight
n<-length(x)
g <- ggplot(data = father.son, aes(x = sheight))
g <- g + geom_histogram(fill = "lightblue", binwidth=1, colour = "black")
g <- g + geom_histogram(fill = "lightblue", binwidth=1, colour = "black")
g <- ggplot(data = father.son, aes(x = sheight))
g <- ggplot(data = father.son, aes(x = sheight))
g + geom_histogram(fill = "lightblue", binwidth=1, colour = "black")
g <- ggplot(data = father.son, aes(x = sheight))
g <- g + geom_histogram(aes(y = ..density..), fill = "lightblue", binwidth=1, colour = "black")
g <- g + geom_density(size = 2, colour = "black")
g
